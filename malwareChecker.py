import json

# List of compromised packages
compromised = [
    "ansi-styles", "chalk", "debug", "supports-color", 
    "strip-ansi", "ansi-regex", "wrap-ansi", "color-convert",
    "color-name", "is-arrayish", "slice-ansi", "color", 
    "color-string", "simple-swizzle", "supports-hyperlinks",
    "has-ansi", "chalk-template", "backslash"
]

# Load package-lock.json
with open("package-lock.json") as f:
    lock_data = json.load(f)

# Recursive function to search dependencies
def find_compromised(deps, path=""):
    matches = []
    for name, info in deps.items():
        full_path = f"{path} > {name}" if path else name
        if name in compromised:
            matches.append(full_path)
        # Recurse into nested dependencies
        if "dependencies" in info:
            matches.extend(find_compromised(info["dependencies"], full_path))
    return matches

# Check root dependencies
found = find_compromised(lock_data.get("dependencies", {}))

if found:
    print("Compromised packages found:")
    for f in found:
        print(f)
else:
    print("No compromised packages found.")
